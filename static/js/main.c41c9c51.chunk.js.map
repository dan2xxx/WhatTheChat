{"version":3,"sources":["styles/Chat.module.css","Chat.js","abi.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Chat","props","React","useState","name","setName","input","setInput","feed","useRef","toDate","unixDate","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","useEffect","current","scrollTop","scrollHeight","clientHeight","messages","className","classes","container","ref","map","messageItem","message","timestamp","style","fontWeight","printMessages","inputForm","nameInput","onChange","e","target","value","placeholder","textInput","onClick","addMessage","abi","App","setMessages","contract","setContract","account","setAccount","window","ethereum","enable","web3","Web3","console","log","connectToMetaMask","a","getMessages","instance","methods","messagesLength","call","length","loadedMessages","i","push","send","from","resp","eth","getAccounts","then","res","Contract","subscription","subscribe","address","topics","error","result","on","NewMessage","event","currentProvider","isMetaMask","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c41c9c51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chat_container__1Ewyf\",\"inputForm\":\"Chat_inputForm__3_Bjc\",\"nameInput\":\"Chat_nameInput__1wO07\",\"textInput\":\"Chat_textInput__1X8c0\",\"message\":\"Chat_message__2rHLj\",\"feed\":\"Chat_feed__23_Os\"};","import React from 'react';\r\nimport classes from './styles/Chat.module.css'\r\n\r\nexport const Chat = (props) => {\r\n\r\n    const [name, setName] = React.useState('')\r\n    const [input, setInput] = React.useState('')\r\n    const feed = React.useRef()\r\n\r\n    const toDate = (unixDate) => {\r\n        let date = new Date(unixDate * 1000)\r\n        let hours = date.getHours()\r\n        let minutes = \"0\" + date.getMinutes()\r\n        let seconds = \"0\" + date.getSeconds()\r\n        let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2)\r\n        return formattedTime\r\n    }\r\n\r\n    const printMessages = () => {\r\n\r\n        if (props.messages) {\r\n            return props.messages.map(messageItem =>\r\n                <div className={classes.message}>{toDate(messageItem.timestamp)} <span style={{ fontWeight: '700' }}>{messageItem.name}</span> : {messageItem.message}</div>)\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        feed.current.scrollTop = feed.current.scrollTop + (feed.current.scrollHeight - feed.current.clientHeight)\r\n    }, [props.messages])\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n\r\n            <h1>What the chat?</h1>\r\n            <div className={classes.feed} ref={feed}>\r\n                {printMessages()}\r\n            </div>\r\n\r\n\r\n            <div className={classes.inputForm}>\r\n                <input className={classes.nameInput} onChange={(e) => setName(e.target.value)} value={name} placeholder='Your name'></input>\r\n                <input className={classes.textInput} onChange={(e) => setInput(e.target.value)} value={input} placeholder='Enter message'></input>\r\n                <button onClick={() => {\r\n                    props.addMessage(name, input)\r\n                    setName('')\r\n                    setInput('')\r\n                }}>Send</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","export const abi = [{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},\r\n{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},\r\n{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewMessage\",\"type\":\"event\"},\r\n{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},\r\n{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"addMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},\r\n{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","import './App.css'\nimport Web3 from 'web3'\nimport React from 'react'\nimport { Chat } from './Chat'\nimport { abi } from './abi'\n\n\nconst address = '0x7896E010042efD99dCB76C3f150156C1544C4030'\n\n\n\n\nfunction App() {\n\n  const [messages, setMessages] = React.useState([])\n  const [contract, setContract] = React.useState(null)\n  const [account, setAccount] = React.useState('')\n\n  if (window.ethereum) {\n    window.ethereum.enable()\n    var web3 = new Web3(window.ethereum)\n    console.log('Provider: metamask')\n  } else {\n    var web3 = new Web3('wss://rinkeby.infura.io/ws/v3/5bdef920720a4ae9bc517ee52259b412')\n    console.log('Provider: infura')\n  }\n\n\n  const connectToMetaMask = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable()\n      web3 = new Web3(window.ethereum)\n    }\n  }\n\n  const getMessages = async (instance) => {\n\n    const length = await instance.methods.messagesLength().call()\n    let loadedMessages = []\n\n    for (let i = 0; i < length; i++) {\n      loadedMessages.push((await instance.methods.messages(i).call()))\n      console.log(loadedMessages)\n    }\n    setMessages(loadedMessages)\n  }\n\n  const addMessage = async (name, message) => {\n\n    const resp = await contract.methods.addMessage(name, message).send({\n      from: `${account}`\n    })\n    console.log(resp)\n  }\n\n  React.useEffect(() => {\n\n    //setting current account to state\n    web3.eth.getAccounts().then((res) => {\n      setAccount(res)\n    })\n\n    //crating contract instance\n    if (abi) {\n      var instance = new web3.eth.Contract(abi, address)\n      setContract(instance)\n      getMessages(instance).then(console.log('messages collected'))\n    }\n\n    //subscribe to event\n    var subscription = web3.eth.subscribe('logs', {\n      address: '0x7896E010042efD99dCB76C3f150156C1544C4030',\n      topics: ['0xd139c8de132b273212c7748176bea519724854faab652bbd83b7967a75f1ac0f']\n    }, function (error, result) {\n      if (!error)\n        console.log(result)\n      console.log('Reload messages')\n      getMessages(instance)\n    })\n      .on(\"connected\", function (NewMessage) {\n        console.log(NewMessage);\n      })\n      .on(\"data\", function (event) {\n        console.log(event);\n      })\n      .on(\"changed\", function (log) {\n      });\n\n    console.log(subscription)\n\n  }, [])\n\n\n\n\n\n\n  return (\n    <div className=\"App\">\n\n\n      {messages.length > 0\n        ? <Chat messages={messages} addMessage={addMessage} />\n        : <h1>Initializing...</h1>}\n\n      {window.ethereum && !web3.currentProvider.isMetaMask\n        ? <button className='connectButton' onClick={connectToMetaMask}>Connect to metamask manualy </button>\n        : null}\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}